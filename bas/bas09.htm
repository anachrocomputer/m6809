<HTML>
<HEAD>
</HEAD>
<BODY>
<H1>6809 BASIC Design Notes</H1>
<H2>Language Features</H2>
<P>
16-bit integer BASIC.
16-bit limitation implies that I/O POKE addresses will be
negative (like Apple ][).
Would 32-bit integers be that much slower?
Maybe have integer variables A% to Z% like BBC BASIC.
The Resident Integer Variables are signed 32 bit values and
are not cleared by RUN or even NEW (only a reset clears them).
These variables are at a fixed location in RAM and take up
104 bytes (26 * 4).
UK101 BASIC uses 32-bit floating point for variables.
Two-character variable names.
Lowercase input legal but mapped to uppercase for output.
Should we support strings?
If so, how?
Need syntax for HEX constants (0x, $, &amp;, ?)
DATA/RESTORE must accept a RESTORE&lt;line number&gt; format.
Should we support a RANDOMIZE (or RANDOMISE) statement?
Minimal BASIC only allows a GOTO after a THEN; should we
support the more general case, as UK101 BASIC does?
Multi-statement lines with colon ':'.
WHILE/WEND loops.
REPEAT/UNTIL loops.
IF/THEN/ELSE is more tricky.
Need some sort of escape to machine code.
Add C-like binary operators for AND '&amp;' and OR '|'.
What about C-like shift operators &lt;&lt; and &gt;&gt; like ARM BBC BASIC?
Should there be a RENUMBER command (BBC BASIC has one)?
What about AUTO line numbering (BBC BASIC has it)?
Do we need TRON and TROFF for tracing?
Should the editor and tokeniser preserve indentation of
source lines?
What about spaces within source lines (delete them, add them or do nothing)?
The Kemeny and Kurtz book uses indentation to show structure.
Do we need the LINPUT keyword (or LINE INPUT or INPUT LINE)?
What about LPRINT and LLIST?
UK101 BASIC allows a PRINT string to have no closing quote;
should we do the same?
</P>
<P>
Should we support in-line comments with the single quote
syntax?
<PRE>
20 GOSUB 1000 ' Read input
</PRE>
</P>
<H2>Source editor</H2>
<P>
Reads command line and allows editing of BASIC source code. Deals with
immediate commands, source line deletions, passes source line insertions
on to Tokeniser.
Immediate commands must be tokenised and then executed.
Certain commands are illegal in immediate mode.
Certain immediate mode actions will prevent the use of CONT
to continue execution.
<H3>Delete Line</H3>
Lines are deleted from the BASIC program by a two step process.
The first step is to find the line that is to be deleted and
then work out how long it is by subtracting its next line pointer.
Knowing the length of the line, we can follow the line links,
subtracting the length to give the new address.
The second step is to block move all the data above the deleted
line down in memory to close up the gap.
<p>
If the user deletes a line or lines of the BASIC program, then
the program cannot be continued with CONT.
This is because the line deleted may have been the target of
a GOTO or GOSUB.
Internally, memory has been moved around and the variables
and arrays will no longer be valid.
To re-run the program, a call to the pre-run module is mandatory.
<H3>Insert Line</H3>
Insertions must get tokenised and then a gap must be opened
up in memory to accomodate the new line.
The line insertion routine must make a fairly complicated check
for out of memory errors, and must do so <i>before</i> any
changes are made to the current BASIC program.
Inserting a new line may make the BASIC program larger, or smaller
(long line replaced with shorter line),
or it may remain the same size (line replaced with corrected line
of same length).
<p>
If the user inserts a line or lines into the BASIC program, then
the program cannot be continued with CONT.
This is because the line inserted may contain a GOTO or GOSUB,
or a variable reference that the pre-run module hasn't seen.
Internally, memory has been moved around and the variables
and arrays will no longer be valid.
To re-run the program, a call to the pre-run module is mandatory.
<H3>Change Line</H3>
This is simply handled by first deleting, then inserting the
line.
The small inefficiency of doing two block moves is insignificant
compared to the simplicity of this approach.
</P>
<H2>Tokeniser</H2>
<P>
Converts source lines to internal representation.
Deals with shorthand '?' for PRINT.
Performs certain types of syntax check, e.g. mismatched string quotes.
GOTO&lt;line number&gt; becomes TGOTO LNHI LNLO ADHI ADLO where
AD represents the address of the destination line.
Constants and variables are tokenised.
</P>
<P>
Should the tokeniser (or any part of the interpreter) generate
warnings?
For instance, a line with a GOTO followed by a colon and another
statement would imply that the second statement is unreachable.
But a GOTO followed by a colon and a REM is OK.
Would such warnings be useful?
</P>
<H2>Pre-run module</H2>
Will scan the BASIC text for GOTO, GOSUB, etc. and fill in pointer.
Will scan for DIM statements.
Should it scan for scalar variable initialisation?
Checks entire program for GOTO/GOSUB consistency.
Performs certain error checks, e.g. GOTO to a non-existent line.
Builds data structure for BASIC variables.
</P>
<P>
One of the functions of the Pre-run module could be to build
a constant table in memory.
Then, we could assign frequently-used constants to special
one-byte tokens that would save memory and speed up
execution.
A simpler version of this plan would be to create fixed
tokens for small constants (e.g. 0, 1, -1) and use them
when appropriate.
A more ambitious scheme would be to implement a similar setup
for variables, although the savings might not be worthwhile.
A side benefit would be a CLIST command to list all
constants in the program.
The dynamic constant table version would imply that the
Pre-run module could make the program shrink in size
(token + two bytes of constant -&gt; one byte token).
It also complicates the LIST mechanism.
</P>
<P>
The Pre-run module could implement a mechanism so that it
only executes if the source has been changed since the last
Pre-run.
Commands like LIST, CLIST and VLIST will need to execute
Pre-run.
</P>
<H2>Run-time</H2>
<P>
Interprets program as fast as possible.
Needs current interpretation pointer, current source line number,
current DATA pointer, etc.
Should never need to search at run-time; all searching will
be done by the pre-run module.
</P>
<P>
Should the 6809 BASIC utilise the additional registers of the
Hitachi 6309?
And/or the additional instructions?
If so, how can it be made to run on the ordinary 6809?
</P>
<P>
Should BASIC support hardware like the sound chip, and if so, how?
What about games joypads, analog joysticks and the like?
Should there be an event-driven interface of some sort?
</P>
<H2>Run-time Data Requirements</H2>
<P>
At run time, we need a current interpretation pointer (equivalent
to the $00BC routine on the UK101).
Since the 6809 has so many more registers than the 6502, we can
afford to dedicate a register to this function.
But should it be X, Y or U?
Or should we use a 6309 enhanced register?
</P>
<P>
We also need a DATA pointer, pointers for top of RAM, top of
program, top of variables and so on.
UK101 BASIC has an I/O flag for CTRL-O, but we won't need that.
</P>
<H2>Commands and Immediate Mode</H2>
<P>
Microsoft BASIC allows any command to be used within a program,
and allows any program statement to be used in command mode.
Not all BASICs do this.
</P>
LIST has the unusual property that, in its arguments, a dash
is not interpreted as the arithmetical symbol for subtraction,
but denotes a range.
That is, the command LIST 20-50 is interpreted as an instruction
to display program lines 20 to 50, inclusive.
The command LIST -100 will show all program lines up to and including
line 100.
This peculiar behaviour is one reason that LIST might be prohibited
from use within a program.
In fact, Microsoft BASIC on the UK101 allows LIST within a program
but fails to carry on executing the program after the listing has
been completed (instead, it returns to command mode).
<P>
</P>
<H2>Load/save mechanism</H2>
<P>
Saves source code in ASCII form.
Invokes LIST for SAVE, tokeniser for LOAD.
Should the LOAD routine warn or error in cases where a loaded
source line overwrites one already loaded?
</P>
</BODY>
</HTML>
